// <auto-generated />
using System;
using JobManagement.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JobManagement.Persistence.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JobManagement.Domain.JobManagers.JobManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("managers", (string)null);
                });

            modelBuilder.Entity("JobManagement.Domain.Users.User", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Name");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("JobManagement.Domain.JobManagers.JobManager", b =>
                {
                    b.OwnsMany("JobManagement.Domain.JobManagers.Entities.Job", "Jobs", b1 =>
                        {
                            b1.Property<int>("JobManagerId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatedInUtc")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime?>("EndTimeInUtc")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime>("ExecutionTimeInUtc")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Priority")
                                .HasColumnType("integer");

                            b1.Property<DateTime?>("StartTimeInUtc")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int>("Status")
                                .HasColumnType("integer");

                            b1.HasKey("JobManagerId", "Id");

                            b1.ToTable("jobs", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("JobManagerId");

                            b1.OwnsOne("JobManagement.Domain.JobManagers.Entities.Entities.JobLog", "Log", b2 =>
                                {
                                    b2.Property<int>("JobManagerId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("JobId")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("JobManagerId", "JobId");

                                    b2.ToTable("jobs");

                                    b2.WithOwner()
                                        .HasForeignKey("JobManagerId", "JobId");
                                });

                            b1.OwnsOne("JobManagement.Domain.JobManagers.Entities.ValueObjects.JobExecutionName", "ExecutionName", b2 =>
                                {
                                    b2.Property<int>("JobManagerId")
                                        .HasColumnType("integer");

                                    b2.Property<int>("JobId")
                                        .HasColumnType("integer");

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("JobManagerId", "JobId");

                                    b2.ToTable("jobs");

                                    b2.WithOwner()
                                        .HasForeignKey("JobManagerId", "JobId");
                                });

                            b1.Navigation("ExecutionName")
                                .IsRequired();

                            b1.Navigation("Log")
                                .IsRequired();
                        });

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JobManagement.Domain.Users.User", b =>
                {
                    b.OwnsOne("JobManagement.Domain.Users.ValueObjects.UserPassword", "Password", b1 =>
                        {
                            b1.Property<string>("UserName")
                                .HasColumnType("text");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserName");

                            b1.ToTable("users");

                            b1.WithOwner()
                                .HasForeignKey("UserName");
                        });

                    b.Navigation("Password")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
